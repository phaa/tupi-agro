<%- contentFor('body') %>

<div class="row">
  <div class="col-lg-4 col-md-4">
    <div class="card">
      <div class="card-header">
        <h5 class="card-category">Controle de Irrigação</h5>
        <h4 id="automaticIrrigationLabel" class="card-title automatic-control">Manual</h4>
        <span id="automaticIrrigationToggle" class="toggle-switch">
          <span class="toggle-knob"></span>
        </span>
      </div>
      <div class="card-body">
        <h5 id="irrigationLabel" style="display: inline-block;">Desligado</h5>
        <span id="irrigationToggle" class="toggle-switch">
          <span class="toggle-knob"></span>
        </span>
      </div>
    </div>
  </div>
  <div class="col-lg-4 col-md-4">
    <div class="card">
      <div class="card-header">
        <h5 class="card-category">Controle de Fertirrigação</h5>
        <h4 class="card-title automatic-control not-active-label">Manual</h4>
        <span id="automaticFertirrigationToggle" class="toggle-switch not-active">
          <span class="toggle-knob"></span>
        </span>
      </div>
      <div class="card-body">
        <h5 id="fertirrigationLabel" style="display: inline-block;">Desligado</h5>
        <span id="fertirrigationToggle" class="toggle-switch">
          <span class="toggle-knob"></span>
        </span>
      </div>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-lg-12 col-md-12">
    <div class="card card-chart">
      <div class="card-header">
        <h5 class="card-category"><b id="umidadeSolo"></b>%</h5>
        <h4 class="card-title">Umidade do solo</h4>
      </div>
      <div class="card-body">
        <div class="chart-area">
          <canvas id="barChartSimpleGradientsNumbers"></canvas>
        </div>
      </div>
      <div class="card-footer">
        <div class="stats">
          <i class="now-ui-icons arrows-1_refresh-69"></i> Em tempo real
        </div>
      </div>
    </div>
  </div>
  <div class="col-lg-12 col-md-12">
    <div class="card card-chart">
      <div class="card-header">
        <h5 class="card-category"><b id="temperaturaAr"></b>°C</h5>
        <h4 class="card-title">Temperatura do ar</h4>
      </div>
      <div class="card-body">
        <div class="chart-area">
          <canvas id="lineChartExample"></canvas>
        </div>
      </div>
      <div class="card-footer">
        <div class="stats">
          <i class="now-ui-icons arrows-1_refresh-69"></i> Em tempo real
        </div>
      </div>
    </div>
  </div>
  <div class="col-lg-12 col-md-12">
    <div class="card card-chart">
      <div class="card-header">
        <h5 class="card-category"><b id="umidadeAr"></b>%</h5>
        <h4 class="card-title">Umidade do ar</h4>
      </div>
      <div class="card-body">
        <div class="chart-area">
          <canvas id="lineChartExampleWithNumbersAndGrid"></canvas>
        </div>
      </div>
      <div class="card-footer">
        <div class="stats">
          <i class="now-ui-icons arrows-1_refresh-69"></i> Em tempo real
        </div>
      </div>
    </div>
  </div>
  
</div>

<script src="/socket.io/socket.io.js" charset="utf-8"></script>
<script src="/js/realtime/analysis-charts.js"></script>
<script>
  chartColor = "#FFFFFF";

// General configuration for the charts with Line gradientStroke
gradientChartOptionsConfiguration = {
  maintainAspectRatio: false,
  legend: {
    display: false
  },
  tooltips: {
    bodySpacing: 4,
    mode: "nearest",
    intersect: 0,
    position: "nearest",
    xPadding: 10,
    yPadding: 10,
    caretPadding: 10
  },
  responsive: 1,
  scales: {
    yAxes: [{
      display: 0,
      gridLines: 0,
      ticks: {
        display: false
      },
      gridLines: {
        zeroLineColor: "transparent",
        drawTicks: false,
        display: false,
        drawBorder: false
      }
    }],
    xAxes: [{
      display: 0,
      gridLines: 0,
      ticks: {
        display: false
      },
      gridLines: {
        zeroLineColor: "transparent",
        drawTicks: false,
        display: false,
        drawBorder: false
      }
    }]
  },
  layout: {
    padding: {
      left: 0,
      right: 0,
      top: 15,
      bottom: 15
    }
  }
};

gradientChartOptionsConfigurationWithNumbersAndGrid = {
  maintainAspectRatio: false,
  legend: {
    display: false
  },
  tooltips: {
    bodySpacing: 4,
    mode: "nearest",
    intersect: 0,
    position: "nearest",
    xPadding: 10,
    yPadding: 10,
    caretPadding: 10
  },
  responsive: true,
  scales: {
    yAxes: [{
      gridLines: 0,
      gridLines: {
        zeroLineColor: "transparent",
        drawBorder: false
      }
    }],
    xAxes: [{
      display: 0,
      gridLines: 0,
      ticks: {
        display: false
      },
      gridLines: {
        zeroLineColor: "transparent",
        drawTicks: false,
        display: false,
        drawBorder: false
      }
    }]
  },
  layout: {
    padding: {
      left: 0,
      right: 0,
      top: 15,
      bottom: 15
    }
  }
};

var cardStatsMiniLineColor = "#fff",
  cardStatsMiniDotColor = "#fff";

// Umidade do solo
let ctx = document.getElementById('barChartSimpleGradientsNumbers').getContext("2d");

gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);
gradientStroke.addColorStop(0, '#18ce0f');
gradientStroke.addColorStop(1, chartColor);

gradientFill = ctx.createLinearGradient(0, 170, 0, 50);
gradientFill.addColorStop(0, "rgba(24, 206, 15, 0)");
gradientFill.addColorStop(1, hexToRGB('#18ce0f', 0.4));

let graficoUmidadeSolo = new Chart(ctx, {
  type: 'line',
  responsive: true,
  data: {
    labels: [0,],
    datasets: [{
      label: "Umidade (%)",
      borderColor: "#18ce0f",
      pointBorderColor: "#FFF",
      pointBackgroundColor: "#18ce0f",
      pointBorderWidth: 2,
      pointHoverRadius: 4,
      pointHoverBorderWidth: 1,
      pointRadius: 4,
      fill: true,
      backgroundColor: gradientFill,
      borderWidth: 2,
      data: [0,]
    }]
  },
  options: gradientChartOptionsConfigurationWithNumbersAndGrid
});

// Umidade do ar
ctx = document.getElementById('lineChartExampleWithNumbersAndGrid').getContext("2d");

gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);
gradientStroke.addColorStop(0, '#2CA8FF');
gradientStroke.addColorStop(1, chartColor);

gradientFill = ctx.createLinearGradient(0, 170, 0, 50);
gradientFill.addColorStop(0, "rgba(128, 182, 244, 0)");
gradientFill.addColorStop(1, hexToRGB('#2CA8FF', 0.4));

let graficoUmidadeAr = new Chart(ctx, {
  type: 'line',
  responsive: true,
  data: {
    labels: [0,],
    datasets: [{
      label: "Umidade (%)",
      borderColor: "#2CA8FF",
      pointBorderColor: "#FFF",
      pointBackgroundColor: "#2CA8FF",
      pointBorderWidth: 2,
      pointHoverRadius: 4,
      pointHoverBorderWidth: 1,
      pointRadius: 4,
      fill: true,
      backgroundColor: gradientFill,
      borderWidth: 2,
      data: [0,]
    }]
  },
  options: gradientChartOptionsConfigurationWithNumbersAndGrid
});

// Temperatura do ar
ctx = document.getElementById('lineChartExample').getContext("2d");

gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);
gradientStroke.addColorStop(0, '#f96332');
gradientStroke.addColorStop(1, chartColor);

gradientFill = ctx.createLinearGradient(0, 170, 0, 50);
gradientFill.addColorStop(0, "rgba(128, 182, 244, 0)");
gradientFill.addColorStop(1, hexToRGB('#f96332', 0.4));

// Temperatura do ar
let graficoTemperaturaAr = new Chart(ctx, {
  type: 'line',
  responsive: true,
  data: {
    labels: [0,],
    datasets: [{
      label: "Temperatura ",
      borderColor: "#f96332",
      pointBorderColor: "#FFF",
      pointBackgroundColor: "#f96332",
      pointBorderWidth: 2,
      pointHoverRadius: 4,
      pointHoverBorderWidth: 1,
      pointRadius: 4,
      fill: true,
      backgroundColor: gradientFill,
      borderWidth: 2,
      data: [0,]
    }]
  },
  options: gradientChartOptionsConfigurationWithNumbersAndGrid
});


function addData(chart, label, data) {
  chart.data.labels.push(label);
  if(chart.data.labels.length >= 9) { chart.data.labels.shift(); }
  chart.data.datasets.forEach((dataset) => {
    dataset.data.push(data);
    if(dataset.data.length >= 9) { dataset.data.shift(); }
  });
  chart.update();
}
</script>
<script>
  $(document).ready(function() {

    const socket = io();

    // Solicita os dados do arduino ao servidor
    socket.emit("messageToArduino", {topic: "tupi/agro/estufa", message: "GET_ARDUINO_STATE"});

    // Add algoritmo para ler variaveis antes de iniciar lado do cliente (arduino tbm)
    // Controle do lado do cliente
    let automaticIrrigationStates = ["Manual", "Automático"];
    let automaticIrrigationState = false;
    let irrigationStates = ["Desligado", "Ligado"];
    let irrigationState = false;
    let fertirrigationState = false;

    let automaticFertirrigationToggle = $("#automaticFertirrigationToggle");
    let fertirrigationToggle = $("#fertirrigationToggle");
    let fertirrigationLabel = $("#fertirrigationLabel");

    let automaticIrrigationToggle = $("#automaticIrrigationToggle");
    let automaticIrrigationLabel = $("#automaticIrrigationLabel");

    let irrigationToggle = $("#irrigationToggle");
    let irrigationLabel = $("#irrigationLabel");

    function changeUI(data) {
      // Toggles da IA
      if(data.aiState == true) {
        automaticIrrigationToggle.addClass('active');
        irrigationToggle.addClass("not-active");
        irrigationLabel.addClass("not-active-label");
        automaticIrrigationLabel.text(automaticIrrigationStates[1]);
        automaticIrrigationState = true;
      } else if(data.aiState == false) {
        automaticIrrigationToggle.removeClass('active');
        irrigationToggle.removeClass("not-active");
        irrigationLabel.removeClass("not-active-label");
        automaticIrrigationLabel.text(automaticIrrigationStates[0]);
        automaticIrrigationState = false;
      }

      // Toggles da irrigação
      if(data.pumpState == true) {
        irrigationToggle.addClass('active');
        irrigationLabel.text(irrigationStates[1]);
        irrigationState = true;
      } else if(data.pumpState == false) {
        irrigationToggle.removeClass('active');
        irrigationLabel.text(irrigationStates[0]);
        irrigationState = false;
      }
    }

    socket.on('initControls', function(data) {
      changeUI(data);
      console.log("ai " + data.aiState)
      console.log("pump " + data.pumpState)
    });

    socket.on('newData', function(data) {
      const { soilMoisture, airTemp, airHumidity } = data;
      addData(graficoTemperaturaAr, airTemp, airTemp);
      addData(graficoUmidadeAr, airHumidity, airHumidity);
      addData(graficoUmidadeSolo, soilMoisture, soilMoisture);
      $('#umidadeSolo').text(soilMoisture);
      $('#umidadeAr').text(airHumidity);
      $('#temperaturaAr').text(airTemp);
    });

    /**
     * Quando o MQTT client no servidor recebe uma confirmação de que 
     * o microcontrolador modificou seu estado seja na bomba, exaustão ou IA.
     * Altera a UI do sistema de acordo com o retorno
    */
    socket.on('confirmUI', function(data) {
      changeUI(data);
      console.log("Confirm UI")
    });

    //Listeners da UI
    automaticIrrigationToggle.on("click", function() {
      automaticIrrigationState = !automaticIrrigationState;
      if (automaticIrrigationState) {
        socket.emit("messageToArduino", {topic: "tupi/agro/bomba", message: "AI_ON"});
      } else {
        socket.emit("messageToArduino", {topic: "tupi/agro/bomba", message: "AI_OFF"});
      }
    });

    irrigationToggle.on("click", function() {
      irrigationState = !irrigationState;
      if (irrigationState) {
        socket.emit("messageToArduino", {topic: "tupi/agro/bomba", message: "PUMP_ON"});
      } else {
        socket.emit("messageToArduino", {topic: "tupi/agro/bomba", message: "PUMP_OFF"});
      }
    });

    automaticFertirrigationToggle.on("click", function() {
      $(this).toggleClass("active");
      fertirrigationToggle.toggleClass("not-active");
      fertirrigationLabel.toggleClass("not-active-label");
    });

    fertirrigationToggle.on("click", function() {
      $(this).toggleClass("active");
      fertirrigationState = !fertirrigationState;
      if (fertirrigationState) {
        fertirrigationLabel.text(irrigationStates[1])
        console.log('ligado')
      } else {
        fertirrigationLabel.text(irrigationStates[0]);
        console.log('desligado')
      }
    });


    /*socket.on('changeirrigationState', function(data) {
      if(data.irrigationState) {
        irrigationToggle.addClass('active');
      } else {
        irrigationToggle.removeClass('active');
      }
    });*/
  });
  
  
</script>